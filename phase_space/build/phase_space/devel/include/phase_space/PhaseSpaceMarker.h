// Generated by gencpp from file phase_space/PhaseSpaceMarker.msg
// DO NOT EDIT!


#ifndef PHASE_SPACE_MESSAGE_PHASESPACEMARKER_H
#define PHASE_SPACE_MESSAGE_PHASESPACEMARKER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace phase_space
{
template <class ContainerAllocator>
struct PhaseSpaceMarker_
{
  typedef PhaseSpaceMarker_<ContainerAllocator> Type;

  PhaseSpaceMarker_()
    : id(0)
    , point()  {
    }
  PhaseSpaceMarker_(const ContainerAllocator& _alloc)
    : id(0)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef std::shared_ptr< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> const> ConstPtr;

}; // struct PhaseSpaceMarker_

typedef ::phase_space::PhaseSpaceMarker_<std::allocator<void> > PhaseSpaceMarker;

typedef std::shared_ptr< ::phase_space::PhaseSpaceMarker > PhaseSpaceMarkerPtr;
typedef std::shared_ptr< ::phase_space::PhaseSpaceMarker const> PhaseSpaceMarkerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phase_space::PhaseSpaceMarker_<ContainerAllocator> & v)
{
rclcpp::message_operations::Printer< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace phase_space

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'phase_space': ['/home/nikiforos/cloned_cepheus_ws/phase_space/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c9f72e618920d9073cbb5b2f0794bb5";
  }

  static const char* value(const ::phase_space::PhaseSpaceMarker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c9f72e618920d90ULL;
  static const uint64_t static_value2 = 0x73cbb5b2f0794bb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phase_space/PhaseSpaceMarker";
  }

  static const char* value(const ::phase_space::PhaseSpaceMarker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# a phase space marker\n\
\n\
# LED id\n\
int64 id\n\
\n\
# 3D coordinates of the LED\n\
geometry_msgs/Point point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::phase_space::PhaseSpaceMarker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PhaseSpaceMarker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phase_space::PhaseSpaceMarker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phase_space::PhaseSpaceMarker_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHASE_SPACE_MESSAGE_PHASESPACEMARKER_H
